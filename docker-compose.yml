services:
  # PostgreSQL база данных
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${PG_NAME}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutreklama_network

  # Redis для кеша и pub/sub
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tutreklama_network

  # Django приложение
  web:
    env_file: .env
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn core.wsgi:application --config settings/gunicorn.prod.conf.py --bind 0.0.0.0:8050"
    user: root
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
      - sessions_volume:/app/userbot/sessions
    ports:
      - "8050:8050"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8050/health/').getcode()==200 else sys.exit(1)" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tutreklama_network

  # Celery worker
  celery-worker:
    env_file: .env
    build: .
    mem_limit: 1g
    command: >
      sh -c "celery -A core worker -l info -c 1 --max-tasks-per-child=50 --prefetch-multiplier=1 --pool=solo"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tutreklama_network

  # Celery beat scheduler
  celery-beat:
    env_file: .env
    build: .
    mem_limit: 512m
    command: >
      sh -c "celery -A core beat -l info"
    depends_on:
      web:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - tutreklama_network

  # Telegram бот
  bot:
    env_file: .env
    build: .
    command: python manage.py tutreklama_runbot
    volumes:
      - logs_volume:/app/logs
      - sessions_volume:/app/userbot/sessions
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - tutreklama_network

  # Менеджер юзерботов
  userbot-manager:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile.userbot
    command: python manage.py run_userbot
    user: root
    volumes:
      - logs_volume:/app/logs
      - sessions_volume:/app/userbot/sessions
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - tutreklama_network

  # Nginx reverse proxy (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - tutreklama_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:
  sessions_volume:


networks:
  tutreklama_network:
    driver: bridge
