from typing import Optional

import redis.asyncio as redis
import structlog
from django.conf import settings

from bot.keyboards import back_to_menu_kb
from bot.models import Channel
from bot.tools import send_long
from userbot.redis_messages import NewAdMessage
from userbot.redis_messages import deserialize_message

logger = structlog.getLogger(__name__)


class AdNotificationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö"""

    def __init__(self, bot):
        self.bot = bot
        self.redis_client: Optional[redis.Redis] = None
        self.pubsub: Optional[redis.client.PubSub] = None

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis"""
        try:
            self.redis_client = redis.Redis(
                host=getattr(settings, "BOT_REDIS_HOST", "localhost"),
                port=getattr(settings, "BOT_REDIS_PORT", 6379),
                db=getattr(settings, "BOT_REDIS_DB", 0),
                decode_responses=True,
            )
            await self.redis_client.ping()
            logger.info("AdNotificationHandler –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Redis")
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è AdNotificationHandler –∫ Redis: {e}"
            )
            raise

    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Redis"""
        if self.pubsub:
            await self.pubsub.close()
        if self.redis_client:
            await self.redis_client.close()

    async def listen_for_ad_notifications(self):
        """–°–ª—É—à–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö"""
        channel = "bot:new_ad"

        try:
            self.pubsub = self.redis_client.pubsub()
            await self.pubsub.subscribe(channel)

            logger.info(f"–°–ª—É—à–∞–µ–º –∫–∞–Ω–∞–ª {channel} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∫–ª–∞–º–µ")

            async for message in self.pubsub.listen():
                if message["type"] == "message":
                    ad_message = deserialize_message(
                        message["data"], NewAdMessage
                    )
                    if ad_message:
                        await self.handle_new_ad(ad_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∫–ª–∞–º–µ: {e}")

    async def handle_new_ad(self, ad_message: NewAdMessage):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–∫–ª–∞–º–Ω–æ–º –ø–æ—Å—Ç–µ"""
        try:
            try:
                channel = await Channel.objects.aget(
                    telegram_id=ad_message.channel_id
                )
            except Channel.DoesNotExist:
                logger.warning(
                    f"–ö–∞–Ω–∞–ª —Å ID {ad_message.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                )
                return

            users = []
            async for user in channel.users.all():
                users.append(user)

            if not users:
                logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª {channel.title}")
                return

            channel_link = (
                ad_message.channel_link
                or f"https://t.me/{channel.main_username}"
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            safe_message_text = ad_message.message_text
            safe_channel_title = ad_message.channel_title

            message_text = f"üì¢ –ù–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ [{safe_channel_title}]({channel_link})\n\n"
            message_text += f"{safe_message_text}\n\n"

            sent_count = 0
            for user in users:
                try:
                    await send_long(
                        self.bot,
                        user.tg_chat_id,
                        message_text,
                        reply_markup=back_to_menu_kb(),
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.tg_user_id}: {e}"
                    )
                # TODO –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –Ω–µ–≥–æ

            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∫–ª–∞–º–µ: {sent_count} –∏–∑ {len(users)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel.title}"
            )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∫–ª–∞–º–µ: {e}", exc_info=True
            )
