import asyncio
from typing import Dict, Optional

import structlog
from asgiref.sync import sync_to_async
from telethon import TelegramClient, events
from telethon.errors import (
    AuthKeyUnregisteredError,
    SessionRevokedError,
)
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest

from bot.models import ChannelNews, UserBot
from core.event_manager import EventType, event_manager
from userbot.redis_messages import (
    NewAdMessage,
    SubscribeChannelsMessage,
    SubscribeResponseMessage,
)
from utils.advertisement_detector import is_advertisement

logger = structlog.getLogger(__name__)


class UserbotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""

    def __init__(self):
        self.active_userbots: Dict[int, TelegramClient] = {}
        self.userbot_tasks: Dict[int, asyncio.Task] = {}
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —é–∑–µ—Ä–±–æ—Ç–æ–≤"""
        self.running = True
        logger.info("UserbotManager –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç—ã
        await self._load_active_userbots()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self._monitor_userbots())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ subscribe
        event_manager.register_handler(
            EventType.SUBSCRIBE_CHANNELS,
            self.handle_subscribe_request,
            "userbot:subscribe",
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        await event_manager.start_listening()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —é–∑–µ—Ä–±–æ—Ç–æ–≤"""
        self.running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.userbot_tasks.values():
            task.cancel()

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in self.active_userbots.values():
            if client.is_connected():
                await client.disconnect()

        self.active_userbots.clear()
        self.userbot_tasks.clear()
        logger.info("UserbotManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _load_active_userbots(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

        def get_active_userbots():
            return list(
                UserBot.objects.filter(
                    status=UserBot.STATUS_ACTIVE, is_active=True
                )
            )

        active_userbots = await sync_to_async(get_active_userbots)()

        for userbot in active_userbots:
            await self._start_userbot(userbot)

    async def _start_userbot(self, userbot: UserBot):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç"""
        try:
            client = await self._create_client(userbot)
            if not client:
                return

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            client.add_event_handler(
                self._create_message_handler(userbot),
                events.NewMessage(incoming=True),
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç
            self.active_userbots[userbot.id] = client

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
            task = asyncio.create_task(self._run_userbot(userbot, client))
            self.userbot_tasks[userbot.id] = task

            logger.info(f"–Æ–∑–µ—Ä–±–æ—Ç {userbot.name} –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ {userbot.name}: {e}")
            userbot.status = UserBot.STATUS_ERROR
            userbot.last_error = str(e)
            await userbot.asave()

    async def _create_client(
        self, userbot: UserBot
    ) -> Optional[TelegramClient]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞"""
        try:
            if userbot.string_session:
                client = TelegramClient(
                    userbot.string_session, userbot.api_id, userbot.api_hash
                )
            else:
                client = TelegramClient(
                    userbot.get_session_path(), userbot.api_id, userbot.api_hash
                )

            await client.connect()

            if not await client.is_user_authorized():
                logger.warning(f"–Æ–∑–µ—Ä–±–æ—Ç {userbot.name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await client.disconnect()
                return None

            return client

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {userbot.name}: {e}")
            return None

    def _create_message_handler(self, userbot: UserBot):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞"""

        async def handler(event):
            await self._handle_new_message(event, userbot)

        return handler

    async def _handle_new_message(self, event, userbot: UserBot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            message = event.message
            channel = await self._get_channel_by_telegram_id(
                message.peer_id.channel_id
            )

            if not channel:
                logger.warning(
                    f"‚ùå –ö–∞–Ω–∞–ª —Å ID {message.peer_id.channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                )
                return
            is_ad = await self._is_ad_message(message)
            if not is_ad:
                return

            await ChannelNews.objects.acreate(
                channel=channel,
                message_id=message.id,
                message=message.text or "",
            )
            ad_message = NewAdMessage(
                channel_id=channel.telegram_id,
                channel_title=channel.title,
                message_id=message.id,
                message_text=message.text or "",
                channel_link=f"https://t.me/{channel.main_username}"
                if channel.main_username
                else channel.link_subscription or "",
            )

            await event_manager.publish_event(
                EventType.NEW_AD_MESSAGE, ad_message, "bot:new_ad"
            )

            logger.info(
                f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel.title} (ID: {message.id})"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _run_userbot(self, userbot: UserBot, client: TelegramClient):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–±–æ—Ç {userbot.name} (ID: {userbot.id})")
        try:
            logger.info(
                f"üì° –Æ–∑–µ—Ä–±–æ—Ç {userbot.name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."
            )
            await client.run_until_disconnected()
            logger.warning(f"‚ö†Ô∏è –Æ–∑–µ—Ä–±–æ—Ç {userbot.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        except (AuthKeyUnregisteredError, SessionRevokedError) as e:
            logger.warning(f"üîë –°–µ—Å—Å–∏—è —é–∑–µ—Ä–±–æ—Ç–∞ {userbot.name} –æ—Ç–æ–∑–≤–∞–Ω–∞: {e}")
            await self._handle_session_error(userbot, str(e))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —é–∑–µ—Ä–±–æ—Ç–µ {userbot.name}: {e}")
            await self._handle_userbot_error(userbot, str(e))

    async def _monitor_userbots(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–æ–≤"""
        while self.running:
            try:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                for userbot_id, task in list(self.userbot_tasks.items()):
                    if task.done():
                        # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–±–æ—Ç
                        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —é–∑–µ—Ä–±–æ—Ç {userbot_id}")
                        await self._restart_userbot(userbot_id)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤: {e}")

    async def _restart_userbot(self, userbot_id: int):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∫–ª–∏–µ–Ω—Ç—ã
            if userbot_id in self.userbot_tasks:
                self.userbot_tasks[userbot_id].cancel()
                del self.userbot_tasks[userbot_id]

            if userbot_id in self.active_userbots:
                client = self.active_userbots[userbot_id]
                if client.is_connected():
                    await client.disconnect()
                del self.active_userbots[userbot_id]

            # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç –∏–∑ –ë–î
            try:
                userbot = await UserBot.objects.aget(id=userbot_id)
            except UserBot.DoesNotExist:
                logger.warning(f"–Æ–∑–µ—Ä–±–æ—Ç {userbot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            await self._start_userbot(userbot)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ {userbot_id}: {e}")

    async def _handle_session_error(self, userbot: UserBot, error: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Å–µ—Å—Å–∏–∏ (–±–∞–Ω –∏–ª–∏ –æ—Ç–∑—ã–≤)"""
        logger.warning(f"–°–µ—Å—Å–∏—è —é–∑–µ—Ä–±–æ—Ç–∞ {userbot.name} –æ—Ç–æ–∑–≤–∞–Ω–∞: {error}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –±–∞–Ω –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∑—ã–≤ —Å–µ—Å—Å–∏–∏
        if "AUTH_KEY_UNREGISTERED" in str(error) or "SESSION_REVOKED" in str(
            error
        ):
            # –≠—Ç–æ –±–∞–Ω - –º–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
            from userbot.userbot_pool import userbot_pool_manager

            await userbot_pool_manager.handle_userbot_ban(userbot)
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
            userbot.status = UserBot.STATUS_ERROR
            userbot.last_error = f"–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏: {error}"
            await userbot.asave()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if userbot.id in self.active_userbots:
            del self.active_userbots[userbot.id]
        if userbot.id in self.userbot_tasks:
            del self.userbot_tasks[userbot.id]

    async def _handle_userbot_error(self, userbot: UserBot, error: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —é–∑–µ—Ä–±–æ—Ç–∞"""
        userbot.status = UserBot.STATUS_ERROR
        userbot.last_error = error
        await userbot.asave()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        asyncio.create_task(self._delayed_restart(userbot.id, 300))

    async def _delayed_restart(self, userbot_id: int, delay: int):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —é–∑–µ—Ä–±–æ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        await asyncio.sleep(delay)
        await self._restart_userbot(userbot_id)

    async def _get_channel_by_telegram_id(self, telegram_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–∞–ª –ø–æ telegram_id"""
        from bot.models import Channel

        try:
            return await Channel.objects.aget(telegram_id=telegram_id)
        except Channel.DoesNotExist:
            return None

    async def _is_ad_message(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π"""

        return is_advertisement(message.text)

    async def add_userbot(self, userbot: UserBot):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —é–∑–µ—Ä–±–æ—Ç"""
        await self._start_userbot(userbot)

    async def remove_userbot(self, userbot_id: int):
        """–£–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–±–æ—Ç"""
        if userbot_id in self.userbot_tasks:
            self.userbot_tasks[userbot_id].cancel()
            del self.userbot_tasks[userbot_id]

        if userbot_id in self.active_userbots:
            client = self.active_userbots[userbot_id]
            if client.is_connected():
                await client.disconnect()
            del self.active_userbots[userbot_id]

    async def handle_subscribe_request(self, request: SubscribeChannelsMessage):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {request.channel_links}")

            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —é–∑–µ—Ä–±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            best_userbot = await self._select_best_userbot()
            if not best_userbot:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —é–∑–µ—Ä–±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
                return

            client = self.active_userbots.get(best_userbot.id)
            if not client or not client.is_connected():
                logger.error(f"–Æ–∑–µ—Ä–±–æ—Ç {best_userbot.name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            results = []
            for channel_link in request.channel_links:
                try:
                    # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ImportChatInviteRequest
                    if channel_link.startswith(
                        "https://t.me/+"
                    ) or channel_link.startswith("t.me/+"):
                        # –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                        if channel_link.startswith("https://t.me/+"):
                            invite_hash = channel_link.replace(
                                "https://t.me/+", ""
                            )
                        else:
                            invite_hash = channel_link.replace("t.me/+", "")

                        try:
                            updates = await client(
                                ImportChatInviteRequest(invite_hash)
                            )
                            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                            if hasattr(updates, "chats") and updates.chats:
                                entity = updates.chats[0]
                            else:
                                raise Exception(
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏"
                                )
                        except Exception as e:
                            raise Exception(
                                f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {str(e)}"
                            )

                        result = {
                            "link": channel_link,
                            "success": True,
                            "telegram_id": abs(entity.id),
                            "title": entity.title,
                            "username": getattr(entity, "username", None),
                            "error_message": None,
                        }
                    else:
                        # –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º entity
                        entity = await client.get_entity(channel_link)
                        await client(JoinChannelRequest(entity))

                        result = {
                            "link": channel_link,
                            "success": True,
                            "telegram_id": entity.id,
                            "title": getattr(entity, "title", ""),
                            "username": getattr(entity, "username", ""),
                            "error_message": None,
                        }

                    results.append(result)
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_link}")

                except Exception as e:
                    logger.error(
                        f"1–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_link}: {e}"
                    )

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
                    result = {
                        "link": channel_link,
                        "success": False,
                        "telegram_id": None,
                        "title": None,
                        "username": None,
                        "error_message": str(e),
                    }
                    results.append(result)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response = SubscribeResponseMessage(
                request_id=request.request_id,
                user_id=request.user_id,
                userbot_id=best_userbot.id,
                results=results,
                success=True,
                error_message=None,
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            response_channel = f"bot:response:{request.request_id}"
            await event_manager.publish_event(
                EventType.SUBSCRIBE_RESPONSE, response, response_channel
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            response = SubscribeResponseMessage(
                request_id=request.request_id,
                user_id=request.user_id,
                userbot_id=0,
                results=[],
                success=False,
                error_message=str(e),
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            response_channel = f"bot:response:{request.request_id}"
            await event_manager.publish_event(
                EventType.SUBSCRIBE_RESPONSE, response, response_channel
            )

    async def _select_best_userbot(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —é–∑–µ—Ä–±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —é–∑–µ—Ä–±–æ—Ç
        for userbot_id, client in self.active_userbots.items():
            if client.is_connected():
                try:

                    def get_userbot():
                        return UserBot.objects.get(id=userbot_id)

                    userbot = await sync_to_async(get_userbot)()
                    return userbot
                except UserBot.DoesNotExist:
                    continue
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
userbot_manager = UserbotManager()
