import asyncio
from typing import Optional

import structlog
from asgiref.sync import sync_to_async
from telethon import TelegramClient, events
from telethon.errors import UserAlreadyParticipantError
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest

from bot.models import Channel, ChannelNews
from core.event_manager import EventType, event_manager
from userbot.redis_messages import (
    ChannelResult,
    NewAdMessage,
    SubscribeChannelsMessage,
    SubscribeResponseMessage,
)
from utils.advertisement_detector import is_advertisement

logger = structlog.getLogger(__name__)


class UserbotDaemon:
    def __init__(self, userbot):
        self.userbot = userbot
        self.client = None
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç userbot daemon"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ UserBot
            api_id = self.userbot.api_id
            api_hash = self.userbot.api_hash
            string_session = self.userbot.string_session

            if string_session:
                self.client = TelegramClient(
                    StringSession(string_session), api_id, api_hash
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
                session_path = self.userbot.get_session_path()
                self.client = TelegramClient(session_path, api_id, api_hash)

            await self.client.connect()

            if not await self.client.is_user_authorized():
                logger.error("Userbot –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
                return

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
            event_manager.register_handler(
                EventType.SUBSCRIBE_CHANNELS,
                self.handle_subscribe_request,
                "userbot:subscribe",
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π
            await event_manager.start_listening()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram
            self.client.add_event_handler(
                self.handle_new_message, events.NewMessage(incoming=True)
            )

            logger.info("Userbot daemon –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            self.running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.run_until_disconnected()

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ userbot daemon: {e}", exc_info=True
            )
        finally:
            self.running = False
            await event_manager.stop_listening()
            if self.client:
                await self.client.disconnect()

    async def handle_subscribe_request(self, request: SubscribeChannelsMessage):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç –±–æ—Ç–∞"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏: {request.request_id}")

        results = []

        for link in request.channel_links:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                if link.startswith("https://t.me/+"):
                    # –ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
                    invite_hash = link.replace("https://t.me/+", "")
                    try:
                        updates = await self.client(
                            ImportChatInviteRequest(invite_hash)
                        )
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                        if hasattr(updates, "chats") and updates.chats:
                            entity = updates.chats[0]
                        else:
                            raise Exception(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏"
                            )
                    except Exception as e:
                        result = ChannelResult(
                            link=link,
                            success=False,
                            error_message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {str(e)}",
                        )
                        results.append(result)
                        continue
                else:
                    # –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
                    try:
                        entity = await self.client.get_entity(link)
                    except Exception as e:
                        result = ChannelResult(
                            link=link,
                            success=False,
                            error_message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {str(e)}",
                        )
                        results.append(result)
                        continue

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞)
                if not link.startswith("https://t.me/+"):
                    try:
                        await self.client(JoinChannelRequest(entity))
                    except UserAlreadyParticipantError:
                        pass  # –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    except Exception as e:
                        result = ChannelResult(
                            link=link,
                            success=False,
                            error_message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}",
                        )
                        results.append(result)
                        continue

                result = ChannelResult(
                    link=link,
                    success=True,
                    telegram_id=abs(entity.id),
                    title=entity.title,
                    username=getattr(entity, "username", None),
                )

                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {entity.title}")

            except Exception as e:
                result = ChannelResult(
                    link=link,
                    success=False,
                    error_message=f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                )
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {link}: {e}")

            results.append(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        response = SubscribeResponseMessage(
            request_id=request.request_id,
            user_id=request.user_id,
            results=[result.__dict__ for result in results],
            success=True,
        )

        await event_manager.publish_event(
            EventType.SUBSCRIBE_RESPONSE,
            response,
            f"bot:response:{request.request_id}",
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {request.request_id}")

    async def handle_new_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            if not event.is_channel:
                return

            message = event.message
            chat = await event.get_chat()
            channel = await self.get_channel_by_id(
                chat.id
            )  # TODO –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã
            if not channel:
                logger.warning(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {chat.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return

            is_ad = await self._is_advertisement(message)
            if not is_ad:
                return
            await self.save_channel_news(channel, message, chat)

            logger.info(
                f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.title}",
                channel_id=chat.id,
                message_id=message.id,
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    @sync_to_async
    def get_channel_by_id(self, channel_id: int) -> Optional[Channel]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –ë–î –ø–æ ID"""
        try:
            return Channel.objects.get(telegram_id=abs(channel_id))
        except Channel.DoesNotExist:
            return None

    async def _is_advertisement(self, message) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º"""

        return is_advertisement(message)

    async def save_channel_news(self, channel: Channel, message, chat):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –≤ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)
            full_text = message.text or ""
            news = await ChannelNews.objects.acreate(
                channel=channel,
                message_id=message.id,
                message=full_text,
            )
            logger.debug(
                f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å ID {news.id} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.title}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–∫–ª–∞–º–Ω–æ–º –ø–æ—Å—Ç–µ
            ad_message = NewAdMessage(
                channel_id=channel.telegram_id,
                channel_title=channel.title,
                message_id=message.id,
                message_text=full_text,
                channel_link=f"https://t.me/{channel.main_username}"
                if channel.main_username
                else channel.link_subscription or "",
            )

            # –ü—É–±–ª–∏–∫—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ event_manager
            await event_manager.publish_event(
                EventType.NEW_AD_MESSAGE, ad_message, "bot:new_ad"
            )

            return news

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}", exc_info=True)
            return None

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç daemon"""
        self.running = False
        if self.client:
            await self.client.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ daemon"""
    daemon = UserbotDaemon()

    try:
        await daemon.start()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await daemon.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ daemon: {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(main())
