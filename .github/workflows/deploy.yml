name: Deploy TutReklama

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Тестирование и проверка кода
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tutreklama_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: |
        uv sync
        uv run pip install pytest pytest-django pytest-cov

  # Сборка и публикация Docker образа
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Деплой на сервер
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    environment: production

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          # Переходим в директорию проекта
          cd /opt/tutreklama

          # Останавливаем текущие контейнеры
          docker-compose down

          # Обновляем код
          git pull origin main

          # Обновляем образы
          docker-compose pull

          # Запускаем миграции
          docker-compose run --rm web python manage.py migrate

          # Собираем статические файлы
          docker-compose run --rm web python manage.py collectstatic --noinput

          # Запускаем сервисы
          docker-compose up -d

          # Проверяем статус
          docker-compose ps

          # Очищаем старые образы
          docker image prune -f

  # Уведомления
  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Деплой успешно завершен!"
        # Здесь можно добавить уведомления в Telegram, Slack и т.д.

    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Деплой завершился с ошибкой!"
        # Здесь можно добавить уведомления об ошибках
